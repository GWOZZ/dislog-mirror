// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/13/2025 18:51:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    TAREA1_C
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TAREA1_C_vlg_sample_tst(
	SW,
	sampler_tx
);
input [9:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module TAREA1_C_vlg_check_tst (
	LED0,
	LED1,
	LED2,
	LED3,
	LED6,
	LED7,
	LED8,
	LED9,
	sampler_rx
);
input  LED0;
input  LED1;
input  LED2;
input  LED3;
input  LED6;
input  LED7;
input  LED8;
input  LED9;
input sampler_rx;

reg  LED0_expected;
reg  LED1_expected;
reg  LED2_expected;
reg  LED3_expected;
reg  LED6_expected;
reg  LED7_expected;
reg  LED8_expected;
reg  LED9_expected;

reg  LED0_prev;
reg  LED1_prev;
reg  LED2_prev;
reg  LED3_prev;
reg  LED6_prev;
reg  LED7_prev;
reg  LED8_prev;
reg  LED9_prev;

reg  LED0_expected_prev;
reg  LED1_expected_prev;
reg  LED2_expected_prev;
reg  LED3_expected_prev;
reg  LED6_expected_prev;
reg  LED7_expected_prev;
reg  LED8_expected_prev;
reg  LED9_expected_prev;

reg  last_LED0_exp;
reg  last_LED1_exp;
reg  last_LED2_exp;
reg  last_LED3_exp;
reg  last_LED6_exp;
reg  last_LED7_exp;
reg  last_LED8_exp;
reg  last_LED9_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	LED0_prev = LED0;
	LED1_prev = LED1;
	LED2_prev = LED2;
	LED3_prev = LED3;
	LED6_prev = LED6;
	LED7_prev = LED7;
	LED8_prev = LED8;
	LED9_prev = LED9;
end

// update expected /o prevs

always @(trigger)
begin
	LED0_expected_prev = LED0_expected;
	LED1_expected_prev = LED1_expected;
	LED2_expected_prev = LED2_expected;
	LED3_expected_prev = LED3_expected;
	LED6_expected_prev = LED6_expected;
	LED7_expected_prev = LED7_expected;
	LED8_expected_prev = LED8_expected;
	LED9_expected_prev = LED9_expected;
end



// expected LED0
initial
begin
	LED0_expected = 1'bX;
end 

// expected LED1
initial
begin
	LED1_expected = 1'bX;
end 

// expected LED2
initial
begin
	LED2_expected = 1'bX;
end 

// expected LED3
initial
begin
	LED3_expected = 1'bX;
end 

// expected LED6
initial
begin
	LED6_expected = 1'bX;
end 

// expected LED7
initial
begin
	LED7_expected = 1'bX;
end 

// expected LED8
initial
begin
	LED8_expected = 1'bX;
end 

// expected LED9
initial
begin
	LED9_expected = 1'bX;
end 
// generate trigger
always @(LED0_expected or LED0 or LED1_expected or LED1 or LED2_expected or LED2 or LED3_expected or LED3 or LED6_expected or LED6 or LED7_expected or LED7 or LED8_expected or LED8 or LED9_expected or LED9)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LED0 = %b | expected LED1 = %b | expected LED2 = %b | expected LED3 = %b | expected LED6 = %b | expected LED7 = %b | expected LED8 = %b | expected LED9 = %b | ",LED0_expected_prev,LED1_expected_prev,LED2_expected_prev,LED3_expected_prev,LED6_expected_prev,LED7_expected_prev,LED8_expected_prev,LED9_expected_prev);
	$display("| real LED0 = %b | real LED1 = %b | real LED2 = %b | real LED3 = %b | real LED6 = %b | real LED7 = %b | real LED8 = %b | real LED9 = %b | ",LED0_prev,LED1_prev,LED2_prev,LED3_prev,LED6_prev,LED7_prev,LED8_prev,LED9_prev);
`endif
	if (
		( LED0_expected_prev !== 1'bx ) && ( LED0_prev !== LED0_expected_prev )
		&& ((LED0_expected_prev !== last_LED0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED0_expected_prev);
		$display ("     Real value = %b", LED0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LED0_exp = LED0_expected_prev;
	end
	if (
		( LED1_expected_prev !== 1'bx ) && ( LED1_prev !== LED1_expected_prev )
		&& ((LED1_expected_prev !== last_LED1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED1_expected_prev);
		$display ("     Real value = %b", LED1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LED1_exp = LED1_expected_prev;
	end
	if (
		( LED2_expected_prev !== 1'bx ) && ( LED2_prev !== LED2_expected_prev )
		&& ((LED2_expected_prev !== last_LED2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED2_expected_prev);
		$display ("     Real value = %b", LED2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LED2_exp = LED2_expected_prev;
	end
	if (
		( LED3_expected_prev !== 1'bx ) && ( LED3_prev !== LED3_expected_prev )
		&& ((LED3_expected_prev !== last_LED3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED3_expected_prev);
		$display ("     Real value = %b", LED3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LED3_exp = LED3_expected_prev;
	end
	if (
		( LED6_expected_prev !== 1'bx ) && ( LED6_prev !== LED6_expected_prev )
		&& ((LED6_expected_prev !== last_LED6_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED6_expected_prev);
		$display ("     Real value = %b", LED6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LED6_exp = LED6_expected_prev;
	end
	if (
		( LED7_expected_prev !== 1'bx ) && ( LED7_prev !== LED7_expected_prev )
		&& ((LED7_expected_prev !== last_LED7_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED7_expected_prev);
		$display ("     Real value = %b", LED7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LED7_exp = LED7_expected_prev;
	end
	if (
		( LED8_expected_prev !== 1'bx ) && ( LED8_prev !== LED8_expected_prev )
		&& ((LED8_expected_prev !== last_LED8_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED8_expected_prev);
		$display ("     Real value = %b", LED8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LED8_exp = LED8_expected_prev;
	end
	if (
		( LED9_expected_prev !== 1'bx ) && ( LED9_prev !== LED9_expected_prev )
		&& ((LED9_expected_prev !== last_LED9_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LED9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LED9_expected_prev);
		$display ("     Real value = %b", LED9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LED9_exp = LED9_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#70000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module TAREA1_C_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [9:0] SW;
// wires                                               
wire LED0;
wire LED1;
wire LED2;
wire LED3;
wire LED6;
wire LED7;
wire LED8;
wire LED9;

wire sampler;                             

// assign statements (if any)                          
TAREA1_C i1 (
// port map - connection between master ports and signals/registers   
	.LED0(LED0),
	.LED1(LED1),
	.LED2(LED2),
	.LED3(LED3),
	.LED6(LED6),
	.LED7(LED7),
	.LED8(LED8),
	.LED9(LED9),
	.SW(SW)
);
// SW[ 9 ]
initial
begin
	SW[9] = 1'b0;
end 
// SW[ 8 ]
initial
begin
	SW[8] = 1'b1;
	SW[8] = #10000 1'b0;
end 
// SW[ 7 ]
initial
begin
	SW[7] = 1'b1;
	SW[7] = #10000 1'b0;
	SW[7] = #10000 1'b1;
	SW[7] = #10000 1'b0;
	SW[7] = #10000 1'b1;
	SW[7] = #10000 1'b0;
	SW[7] = #10000 1'b1;
end 
// SW[ 6 ]
initial
begin
	SW[6] = 1'b0;
	SW[6] = #40000 1'b1;
	SW[6] = #10000 1'b0;
end 
// SW[ 5 ]
initial
begin
	SW[5] = 1'b0;
	SW[5] = #20000 1'b1;
	SW[5] = #10000 1'b0;
	SW[5] = #30000 1'b1;
end 
// SW[ 4 ]
initial
begin
	SW[4] = 1'b1;
	SW[4] = #10000 1'b0;
	SW[4] = #10000 1'b1;
	SW[4] = #10000 1'b0;
	SW[4] = #10000 1'b1;
	SW[4] = #10000 1'b0;
end 
// SW[ 3 ]
initial
begin
	SW[3] = 1'b0;
end 
// SW[ 2 ]
initial
begin
	SW[2] = 1'b1;
	SW[2] = #10000 1'b0;
	SW[2] = #30000 1'b1;
	SW[2] = #10000 1'b0;
	SW[2] = #10000 1'b1;
end 
// SW[ 1 ]
initial
begin
	SW[1] = 1'b0;
	SW[1] = #40000 1'b1;
	SW[1] = #10000 1'b0;
	SW[1] = #10000 1'b1;
end 
// SW[ 0 ]
initial
begin
	SW[0] = 1'b0;
	SW[0] = #20000 1'b1;
	SW[0] = #10000 1'b0;
	SW[0] = #10000 1'b1;
	SW[0] = #10000 1'b0;
	SW[0] = #10000 1'b1;
end 

TAREA1_C_vlg_sample_tst tb_sample (
	.SW(SW),
	.sampler_tx(sampler)
);

TAREA1_C_vlg_check_tst tb_out(
	.LED0(LED0),
	.LED1(LED1),
	.LED2(LED2),
	.LED3(LED3),
	.LED6(LED6),
	.LED7(LED7),
	.LED8(LED8),
	.LED9(LED9),
	.sampler_rx(sampler)
);
endmodule

