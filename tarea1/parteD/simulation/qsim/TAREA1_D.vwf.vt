// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/13/2025 19:33:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    TAREA1_D
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TAREA1_D_vlg_sample_tst(
	SW,
	sampler_tx
);
input [2:0] SW;
output sampler_tx;

reg sample;
time current_time;
always @(SW)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module TAREA1_D_vlg_check_tst (
	A1,
	A2,
	B1,
	B2,
	C1,
	C2,
	D1,
	D2,
	E1,
	E2,
	F1,
	F2,
	G1,
	G2,
	sampler_rx
);
input  A1;
input  A2;
input  B1;
input  B2;
input  C1;
input  C2;
input  D1;
input  D2;
input  E1;
input  E2;
input  F1;
input  F2;
input  G1;
input  G2;
input sampler_rx;

reg  A1_expected;
reg  A2_expected;
reg  B1_expected;
reg  B2_expected;
reg  C1_expected;
reg  C2_expected;
reg  D1_expected;
reg  D2_expected;
reg  E1_expected;
reg  E2_expected;
reg  F1_expected;
reg  F2_expected;
reg  G1_expected;
reg  G2_expected;

reg  A1_prev;
reg  A2_prev;
reg  B1_prev;
reg  B2_prev;
reg  C1_prev;
reg  C2_prev;
reg  D1_prev;
reg  D2_prev;
reg  E1_prev;
reg  E2_prev;
reg  F1_prev;
reg  F2_prev;
reg  G1_prev;
reg  G2_prev;

reg  A1_expected_prev;
reg  A2_expected_prev;
reg  B1_expected_prev;
reg  B2_expected_prev;
reg  C1_expected_prev;
reg  C2_expected_prev;
reg  D1_expected_prev;
reg  D2_expected_prev;
reg  E1_expected_prev;
reg  E2_expected_prev;
reg  F1_expected_prev;
reg  F2_expected_prev;
reg  G1_expected_prev;
reg  G2_expected_prev;

reg  last_A1_exp;
reg  last_A2_exp;
reg  last_B1_exp;
reg  last_B2_exp;
reg  last_C1_exp;
reg  last_C2_exp;
reg  last_D1_exp;
reg  last_D2_exp;
reg  last_E1_exp;
reg  last_E2_exp;
reg  last_F1_exp;
reg  last_F2_exp;
reg  last_G1_exp;
reg  last_G2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:14] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 14'b1;
end

// update real /o prevs

always @(trigger)
begin
	A1_prev = A1;
	A2_prev = A2;
	B1_prev = B1;
	B2_prev = B2;
	C1_prev = C1;
	C2_prev = C2;
	D1_prev = D1;
	D2_prev = D2;
	E1_prev = E1;
	E2_prev = E2;
	F1_prev = F1;
	F2_prev = F2;
	G1_prev = G1;
	G2_prev = G2;
end

// update expected /o prevs

always @(trigger)
begin
	A1_expected_prev = A1_expected;
	A2_expected_prev = A2_expected;
	B1_expected_prev = B1_expected;
	B2_expected_prev = B2_expected;
	C1_expected_prev = C1_expected;
	C2_expected_prev = C2_expected;
	D1_expected_prev = D1_expected;
	D2_expected_prev = D2_expected;
	E1_expected_prev = E1_expected;
	E2_expected_prev = E2_expected;
	F1_expected_prev = F1_expected;
	F2_expected_prev = F2_expected;
	G1_expected_prev = G1_expected;
	G2_expected_prev = G2_expected;
end



// expected A2
initial
begin
	A2_expected = 1'bX;
end 

// expected B2
initial
begin
	B2_expected = 1'bX;
end 

// expected C2
initial
begin
	C2_expected = 1'bX;
end 

// expected D2
initial
begin
	D2_expected = 1'bX;
end 

// expected E2
initial
begin
	E2_expected = 1'bX;
end 

// expected F2
initial
begin
	F2_expected = 1'bX;
end 

// expected G2
initial
begin
	G2_expected = 1'bX;
end 

// expected A1
initial
begin
	A1_expected = 1'bX;
end 

// expected B1
initial
begin
	B1_expected = 1'bX;
end 

// expected C1
initial
begin
	C1_expected = 1'bX;
end 

// expected D1
initial
begin
	D1_expected = 1'bX;
end 

// expected E1
initial
begin
	E1_expected = 1'bX;
end 

// expected F1
initial
begin
	F1_expected = 1'bX;
end 

// expected G1
initial
begin
	G1_expected = 1'bX;
end 
// generate trigger
always @(A1_expected or A1 or A2_expected or A2 or B1_expected or B1 or B2_expected or B2 or C1_expected or C1 or C2_expected or C2 or D1_expected or D1 or D2_expected or D2 or E1_expected or E1 or E2_expected or E2 or F1_expected or F1 or F2_expected or F2 or G1_expected or G1 or G2_expected or G2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A1 = %b | expected A2 = %b | expected B1 = %b | expected B2 = %b | expected C1 = %b | expected C2 = %b | expected D1 = %b | expected D2 = %b | expected E1 = %b | expected E2 = %b | expected F1 = %b | expected F2 = %b | expected G1 = %b | expected G2 = %b | ",A1_expected_prev,A2_expected_prev,B1_expected_prev,B2_expected_prev,C1_expected_prev,C2_expected_prev,D1_expected_prev,D2_expected_prev,E1_expected_prev,E2_expected_prev,F1_expected_prev,F2_expected_prev,G1_expected_prev,G2_expected_prev);
	$display("| real A1 = %b | real A2 = %b | real B1 = %b | real B2 = %b | real C1 = %b | real C2 = %b | real D1 = %b | real D2 = %b | real E1 = %b | real E2 = %b | real F1 = %b | real F2 = %b | real G1 = %b | real G2 = %b | ",A1_prev,A2_prev,B1_prev,B2_prev,C1_prev,C2_prev,D1_prev,D2_prev,E1_prev,E2_prev,F1_prev,F2_prev,G1_prev,G2_prev);
`endif
	if (
		( A1_expected_prev !== 1'bx ) && ( A1_prev !== A1_expected_prev )
		&& ((A1_expected_prev !== last_A1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A1_expected_prev);
		$display ("     Real value = %b", A1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A1_exp = A1_expected_prev;
	end
	if (
		( A2_expected_prev !== 1'bx ) && ( A2_prev !== A2_expected_prev )
		&& ((A2_expected_prev !== last_A2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A2_expected_prev);
		$display ("     Real value = %b", A2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_A2_exp = A2_expected_prev;
	end
	if (
		( B1_expected_prev !== 1'bx ) && ( B1_prev !== B1_expected_prev )
		&& ((B1_expected_prev !== last_B1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B1_expected_prev);
		$display ("     Real value = %b", B1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B1_exp = B1_expected_prev;
	end
	if (
		( B2_expected_prev !== 1'bx ) && ( B2_prev !== B2_expected_prev )
		&& ((B2_expected_prev !== last_B2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B2_expected_prev);
		$display ("     Real value = %b", B2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_B2_exp = B2_expected_prev;
	end
	if (
		( C1_expected_prev !== 1'bx ) && ( C1_prev !== C1_expected_prev )
		&& ((C1_expected_prev !== last_C1_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C1_expected_prev);
		$display ("     Real value = %b", C1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_C1_exp = C1_expected_prev;
	end
	if (
		( C2_expected_prev !== 1'bx ) && ( C2_prev !== C2_expected_prev )
		&& ((C2_expected_prev !== last_C2_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C2_expected_prev);
		$display ("     Real value = %b", C2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_C2_exp = C2_expected_prev;
	end
	if (
		( D1_expected_prev !== 1'bx ) && ( D1_prev !== D1_expected_prev )
		&& ((D1_expected_prev !== last_D1_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D1_exp = D1_expected_prev;
	end
	if (
		( D2_expected_prev !== 1'bx ) && ( D2_prev !== D2_expected_prev )
		&& ((D2_expected_prev !== last_D2_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D2_exp = D2_expected_prev;
	end
	if (
		( E1_expected_prev !== 1'bx ) && ( E1_prev !== E1_expected_prev )
		&& ((E1_expected_prev !== last_E1_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E1_expected_prev);
		$display ("     Real value = %b", E1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_E1_exp = E1_expected_prev;
	end
	if (
		( E2_expected_prev !== 1'bx ) && ( E2_prev !== E2_expected_prev )
		&& ((E2_expected_prev !== last_E2_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E2_expected_prev);
		$display ("     Real value = %b", E2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_E2_exp = E2_expected_prev;
	end
	if (
		( F1_expected_prev !== 1'bx ) && ( F1_prev !== F1_expected_prev )
		&& ((F1_expected_prev !== last_F1_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_F1_exp = F1_expected_prev;
	end
	if (
		( F2_expected_prev !== 1'bx ) && ( F2_prev !== F2_expected_prev )
		&& ((F2_expected_prev !== last_F2_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F2_expected_prev);
		$display ("     Real value = %b", F2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_F2_exp = F2_expected_prev;
	end
	if (
		( G1_expected_prev !== 1'bx ) && ( G1_prev !== G1_expected_prev )
		&& ((G1_expected_prev !== last_G1_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G1_expected_prev);
		$display ("     Real value = %b", G1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_G1_exp = G1_expected_prev;
	end
	if (
		( G2_expected_prev !== 1'bx ) && ( G2_prev !== G2_expected_prev )
		&& ((G2_expected_prev !== last_G2_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G2_expected_prev);
		$display ("     Real value = %b", G2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_G2_exp = G2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#160000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module TAREA1_D_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] SW;
// wires                                               
wire A1;
wire A2;
wire B1;
wire B2;
wire C1;
wire C2;
wire D1;
wire D2;
wire E1;
wire E2;
wire F1;
wire F2;
wire G1;
wire G2;

wire sampler;                             

// assign statements (if any)                          
TAREA1_D i1 (
// port map - connection between master ports and signals/registers   
	.A1(A1),
	.A2(A2),
	.B1(B1),
	.B2(B2),
	.C1(C1),
	.C2(C2),
	.D1(D1),
	.D2(D2),
	.E1(E1),
	.E2(E2),
	.F1(F1),
	.F2(F2),
	.G1(G1),
	.G2(G2),
	.SW(SW)
);
// SW[ 2 ]
always
begin
	SW[2] = 1'b0;
	SW[2] = #20000 1'b1;
	#20000;
end 
// SW[ 1 ]
always
begin
	SW[1] = 1'b0;
	SW[1] = #40000 1'b1;
	#40000;
end 
// SW[ 0 ]
always
begin
	SW[0] = 1'b0;
	SW[0] = #80000 1'b1;
	#80000;
end 

TAREA1_D_vlg_sample_tst tb_sample (
	.SW(SW),
	.sampler_tx(sampler)
);

TAREA1_D_vlg_check_tst tb_out(
	.A1(A1),
	.A2(A2),
	.B1(B1),
	.B2(B2),
	.C1(C1),
	.C2(C2),
	.D1(D1),
	.D2(D2),
	.E1(E1),
	.E2(E2),
	.F1(F1),
	.F2(F2),
	.G1(G1),
	.G2(G2),
	.sampler_rx(sampler)
);
endmodule

